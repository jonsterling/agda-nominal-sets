module functor where

open import Agda.Primitive

import category
import setoid as S

record t ..{โโโฐ โโยน โโโฐ โโยน} (๐ : category.t โโโฐ โโโฐ) (๐ : category.t โโยน โโยน) : Set (โโโฐ โ โโยน โ โโยน โ โโโฐ) where
  module ๐ = category.t ๐
  module ๐ = category.t ๐
  field
    act : ๐.obj โ ๐.obj
    map : {a b : _} โ S.obj (๐.hom a b S.โ ๐.hom (act a) (act b))

open t public
